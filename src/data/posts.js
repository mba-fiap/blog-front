export const posts = [
  {
    id: 1,
    slug: 'como-criar-um-blog-com-vuejs',
    title: 'Como criar um blog com Vue.js',
    image: '/images/como-criar-um-blog-com-vuejs.png',
    thumb: '/images/como-criar-um-blog-com-vuejs-thumb.png',
    content: `
## Introdu√ß√£o

Criar um blog com Vue.js √© uma excelente forma de aprender o framework enquanto desenvolve algo √∫til. Neste artigo, voc√™ ver√° como montar a estrutura inicial, criar rotas e componentes, e deixar seu blog pronto para publica√ß√£o.

---

## 1. Configurando o projeto

Primeiro, voc√™ precisa criar um novo projeto com o Vue CLI ou Vite:

\`\`\`bash
npm init vue@latest
# ou
npm create vite@latest
\`\`\`

Escolha as configura√ß√µes que desejar (suporte a router, TypeScript etc.).

---

## 2. Criando rotas com Vue Router

O Vue Router permite que voc√™ crie navega√ß√£o entre as p√°ginas do blog, como:

- P√°gina inicial
- P√°gina de post individual
- P√°gina de erro 404

Exemplo de rota:

\`\`\`js
{
  path: '/post/:slug',
  name: 'PostDetail',
  component: () => import('@/views/PostDetail.vue')
}
\`\`\`

---

## 3. Estrutura de componentes

Voc√™ pode criar componentes como:

- \`PostList.vue\` ‚Äî mostra todos os posts
- \`PostCard.vue\` ‚Äî preview de um post
- \`PostDetail.vue\` ‚Äî p√°gina com o conte√∫do completo do post

---

## 4. Trabalhando com dados mock

Crie um arquivo \`posts.ts\` com seus dados (como esse que estamos criando agora) e use como base para simular um backend.

---

## 5. Estilizando o blog

Voc√™ pode usar Tailwind CSS, Bootstrap ou CSS puro. O importante √© manter uma identidade visual consistente.

---

## Conclus√£o

Agora voc√™ tem a base de um blog com Vue.js! √â poss√≠vel evoluir ainda mais, integrando com CMSs como Strapi ou Sanity, usando Markdown para o conte√∫do, e at√© fazer deploy gratuito com Netlify ou Vercel.

Boa codifica√ß√£o üöÄ
  `,
  },
  {
    id: 2,
    slug: 'vuex-na-pratica',
    title: 'Gerenciamento de estado com Vuex na pr√°tica',
    image: '/images/vuex-na-pratica.png',
    thumb: '/images/vuex-na-pratica-thumb.png',
    content: `# Gerenciamento de estado com Vuex na pr√°tica

Gerenciar o estado da aplica√ß√£o √© um dos maiores desafios ao construir interfaces ricas com muitos componentes. O Vuex √© a solu√ß√£o oficial do Vue.js para esse problema e funciona como uma store centralizada que armazena todo o estado compartilhado da aplica√ß√£o.

Este post apresenta conceitos fundamentais do Vuex, exemplos pr√°ticos, quando utilizar (ou n√£o), al√©m de mostrar como integr√°-lo com a Composition API.

---

## O que √© o Vuex?

Vuex √© uma biblioteca de gerenciamento de estado inspirada no padr√£o Flux. Ele permite:

- Centralizar o estado da aplica√ß√£o
- Tornar muta√ß√µes previs√≠veis atrav√©s de commits
- Rastrear altera√ß√µes no estado com ferramentas de debug

Sua estrutura √© baseada em **state**, **getters**, **mutations**, **actions** e **modules**.

---

## Estrutura b√°sica de uma store Vuex

\`\`\`js
import { createStore } from 'vuex'

export const store = createStore({
  state: () => ({
    count: 0
  }),
  mutations: {
    increment(state) {
      state.count++
    }
  },
  actions: {
    incrementAsync({ commit }) {
      setTimeout(() => {
        commit('increment')
      }, 1000)
    }
  },
  getters: {
    doubleCount(state) {
      return state.count * 2
    }
  }
})
\`\`\`

---

## Quando usar Vuex

Voc√™ **n√£o precisa** do Vuex em todos os projetos Vue. Use-o quando:

- M√∫ltiplos componentes precisam acessar e modificar os mesmos dados
- Voc√™ quer rastrear o hist√≥rico de mudan√ßas no estado
- O app √© grande e tem intera√ß√µes complexas entre dom√≠nios

Para apps pequenos ou m√©dios, \`ref()\` e \`reactive()\` com \`provide/inject\` ou Pinia (substituto moderno) podem ser mais simples.

---

## Integrando Vuex com a Composition API

Com Vue 3 e Composition API, voc√™ pode usar o Vuex com \`useStore()\`:

\`\`\`ts
import { useStore } from 'vuex'
import { computed } from 'vue'

export default {
  setup() {
    const store = useStore()

    const count = computed(() => store.state.count)
    const increment = () => store.commit('increment')

    return { count, increment }
  }
}
\`\`\`

---

## M√≥dulos Vuex

Voc√™ pode dividir sua store em m√≥dulos para melhor organiza√ß√£o:

\`\`\`js
const cart = {
  namespaced: true,
  state: () => ({ items: [] }),
  mutations: {
    addItem(state, item) {
      state.items.push(item)
    }
  }
}

const store = createStore({
  modules: { cart }
})
\`\`\`

---

## Vuex vs Pinia

Desde o Vue 3, a comunidade vem migrando para o [Pinia](https://pinia.vuejs.org), considerado o sucessor oficial do Vuex:

| Vuex                      | Pinia                    |
|--------------------------|--------------------------|
| Verboso                  | API mais simples         |
| Mutations + Actions      | Apenas actions           |
| N√£o tree-shakable        | Tree-shakable            |
| Suporte legado Vue 2/3   | Foco no Vue 3+           |

---

## Conclus√£o

Vuex continua sendo uma √≥tima escolha para projetos Vue que precisam de controle centralizado de estado, especialmente em apps grandes. No entanto, se estiver iniciando um novo projeto com Vue 3, considere tamb√©m avaliar o Pinia, que oferece uma abordagem mais moderna e concisa para gerenciamento de estado.

A chave √© entender as necessidades da sua aplica√ß√£o e escolher a ferramenta que equilibra **clareza**, **manuten√ß√£o** e **complexidade**.`,
  },
  {
    id: 3,
    slug: 'componentes-reutilizaveis-vue',
    title: 'Criando componentes reutiliz√°veis no Vue',
    image: '/images/componentes-reutilizaveis-vue.png',
    thumb: '/images/componentes-reutilizaveis-vue-thumb.png',
    content: `# Criando componentes reutiliz√°veis no Vue

Criar componentes reutiliz√°veis √© uma das principais vantagens ao trabalhar com frameworks como o Vue.js. Componentes bem estruturados melhoram a manutenibilidade, reduzem a duplica√ß√£o de c√≥digo e facilitam a padroniza√ß√£o de interfaces.

Neste post, vamos ver como criar componentes reutiliz√°veis no Vue 3 usando a Composition API, com boas pr√°ticas para \`props\`, \`slots\`, \`emit\` e composi√ß√£o de estilo.

---

## Por que criar componentes reutiliz√°veis?

- **Redu√ß√£o de c√≥digo duplicado**
- **Facilidade de manuten√ß√£o**
- **Cria√ß√£o de uma base para um design system**
- **Padroniza√ß√£o da UI e comportamento da aplica√ß√£o**

---

## Exemplo: Componente de bot√£o reutiliz√°vel

Vamos criar um bot√£o simples e reutiliz√°vel com suporte a diferentes variantes:

### \`BaseButton.vue\`

\`\`\`vue
<template>
  <button
    :class="[
      'px-4 py-2 rounded font-semibold transition-colors duration-300',
      variantClasses
    ]"
    @click="$emit('click')"
  >
    <slot />
  </button>
</template>

<script setup>
import { computed } from 'vue'

const props = defineProps({
  variant: {
    type: String,
    default: 'primary'
  }
})

const variantClasses = computed(() => {
  switch (props.variant) {
    case 'secondary':
      return 'bg-gray-200 text-gray-800 hover:bg-gray-300'
    case 'danger':
      return 'bg-red-500 text-white hover:bg-red-600'
    default:
      return 'bg-blue-500 text-white hover:bg-blue-600'
  }
})
</script>
\`\`\`

---

## Usando o componente

\`\`\`vue
<BaseButton @click="doSomething">Salvar</BaseButton>
<BaseButton variant="secondary">Cancelar</BaseButton>
<BaseButton variant="danger">Excluir</BaseButton>
\`\`\`

---

## Componentes com \`slots\` e \`fallback\`

Slots s√£o essenciais para criar componentes flex√≠veis. Exemplo com um \`Card\`:

### \`BaseCard.vue\`

\`\`\`vue
<template>
  <div class="p-4 rounded-lg shadow bg-white">
    <header v-if="$slots.header" class="mb-2">
      <slot name="header" />
    </header>

    <div class="text-sm text-gray-700">
      <slot />
    </div>

    <footer v-if="$slots.footer" class="mt-4">
      <slot name="footer" />
    </footer>
  </div>
</template>
\`\`\`

---

## Composi√ß√£o de estilo e comportamento

Evite hardcodes repetidos. Reutilize utilit√°rios com \`@apply\`, classes din√¢micas e at√© mixins se necess√°rio. Use \`emit\` para a√ß√µes esperadas:

\`\`\`vue
<template>
  <input
    :value="modelValue"
    @input="$emit('update:modelValue', $event.target.value)"
    class="border px-3 py-2 rounded w-full"
  />
</template>

<script setup>
defineProps(['modelValue'])
defineEmits(['update:modelValue'])
</script>
\`\`\`

---

## Boas pr√°ticas

- Use nomes prefixados (\`BaseButton\`, \`BaseCard\`, etc.)
- Documente os \`props\` com tipos e valores padr√£o
- Priorize \`slots\` para conte√∫do flex√≠vel
- Use \`defineEmits\` e \`defineProps\` com tipagem
- Evite acoplamento direto com dados externos (fa√ßa seu componente o mais isolado poss√≠vel)

---

## Conclus√£o

Criar componentes reutiliz√°veis √© o primeiro passo para criar um design system robusto e uma aplica√ß√£o Vue escal√°vel. Com props bem definidas, uso estrat√©gico de slots e aten√ß√£o ao estilo, √© poss√≠vel construir interfaces flex√≠veis, manuten√≠veis e coesas.

Comece pequeno ‚Äî com bot√µes, inputs, cards ‚Äî e evolua para estruturas mais completas como tabelas, modais e layouts.`,
  },
  {
    id: 4,
    slug: 'introducao-vue-router',
    title: 'Introdu√ß√£o ao Vue Router',
    image: '/images/introducao-vue-router.png',
    thumb: '/images/introducao-vue-router-thumb.png',
    content: `# Introdu√ß√£o ao Vue Router

Ao construir aplica√ß√µes Vue com m√∫ltiplas p√°ginas ou telas, voc√™ precisar√° de um sistema de rotas para navegar entre elas sem recarregar a p√°gina. O [Vue Router](https://router.vuejs.org) √© a solu√ß√£o oficial de roteamento para Vue.js, e permite transformar seu app em uma SPA (Single Page Application) completa.

Neste post, vamos cobrir os conceitos b√°sicos de roteamento com Vue 3 e Composition API.

---

## Instala√ß√£o

Se voc√™ estiver usando Vite, pode instalar o Vue Router com:

\`\`\`bash
npm install vue-router@4
\`\`\`

---

## Estrutura de exemplo

Vamos criar duas p√°ginas: \`Home.vue\` e \`About.vue\`.

\`\`\`vue
<!-- Home.vue -->
<template>
  <div>
    <h1>Home</h1>
    <p>Bem-vindo √† p√°gina inicial!</p>
  </div>
</template>
\`\`\`

\`\`\`vue
<!-- About.vue -->
<template>
  <div>
    <h1>Sobre</h1>
    <p>Esta √© a p√°gina sobre o projeto.</p>
  </div>
</template>
\`\`\`

---

## Configurando o Vue Router

Crie um arquivo chamado \`router/index.ts\` (ou \`.js\`):

\`\`\`ts
import { createRouter, createWebHistory } from 'vue-router'
import Home from '../views/Home.vue'
import About from '../views/About.vue'

const routes = [
  { path: '/', name: 'Home', component: Home },
  { path: '/about', name: 'About', component: About }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router
\`\`\`

---

## Integrando ao Vue

No seu \`main.ts\`:

\`\`\`ts
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'

const app = createApp(App)
app.use(router)
app.mount('#app')
\`\`\`

---

## Navega√ß√£o entre p√°ginas

Voc√™ pode usar o componente \`<router-link>\`:

\`\`\`vue
<router-link to="/">In√≠cio</router-link>
<router-link to="/about">Sobre</router-link>
\`\`\`

Ou fazer a navega√ß√£o programaticamente:

\`\`\`ts
this.$router.push('/about')
\`\`\`

Se estiver usando Composition API:

\`\`\`ts
import { useRouter } from 'vue-router'

const router = useRouter()
router.push('/about')
\`\`\`

---

## Rota com par√¢metros

Voc√™ pode definir rotas din√¢micas:

\`\`\`ts
{ path: '/user/:id', component: UserProfile }
\`\`\`

E acess√°-las via:

\`\`\`ts
const route = useRoute()
console.log(route.params.id)
\`\`\`

---

## Rotas aninhadas

Voc√™ pode definir rotas dentro de outras:

\`\`\`ts
{
  path: '/admin',
  component: AdminLayout,
  children: [
    { path: 'users', component: AdminUsers },
    { path: 'settings', component: AdminSettings }
  ]
}
\`\`\`

---

## Conclus√£o

O Vue Router √© essencial para qualquer aplica√ß√£o Vue com m√∫ltiplas telas. Ele oferece rotas din√¢micas, navega√ß√£o program√°tica, lazy loading de p√°ginas e suporte a guardas de rota. Aprender a us√°-lo corretamente √© um passo fundamental para estruturar SPAs profissionais com Vue.js.

No pr√≥ximo n√≠vel, voc√™ pode explorar:
- Lazy loading de componentes com \`defineAsyncComponent\`
- Guardas de rota (\`beforeEach\`)
- Nested views com \`<router-view>\`
- Navega√ß√£o com transi√ß√µes animadas`,
  },
  {
    id: 5,
    slug: 'vue3-vs-vue2',
    title: 'Vue 3 vs Vue 2: Principais diferen√ßas',
    image: '/images/vue3-vs-vue2.png',
    thumb: '/images/vue3-vs-vue2-thumb.png',
    content: `# Vue 3 vs Vue 2: Principais diferen√ßas

O Vue.js evoluiu muito desde sua primeira vers√£o. A chegada do Vue 3 trouxe melhorias significativas de performance, uma nova forma de escrever componentes e uma base mais moderna para aplica√ß√µes complexas.

Neste post, vamos destacar as principais diferen√ßas entre o Vue 2 e o Vue 3 para ajudar voc√™ a entender o que mudou e por que vale a pena considerar a migra√ß√£o.

---

## 1. Performance e arquitetura interna

O Vue 3 foi reescrito do zero usando TypeScript e adotou uma arquitetura baseada em proxies ao inv√©s de \`Object.defineProperty\`, o que trouxe:

- Menor bundle size (~55% menor)
- Melhor gerenciamento de reatividade
- Melhor suporte a TypeScript
- Tempo de inicializa√ß√£o mais r√°pido

---

## 2. Composition API

A maior mudan√ßa para os desenvolvedores foi a introdu√ß√£o da **Composition API**, uma nova forma de organizar a l√≥gica dos componentes.

### Vue 2 (Options API):

\`\`\`js
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  }
}
\`\`\`

### Vue 3 (Composition API):

\`\`\`js
import { ref } from 'vue'

export default {
  setup() {
    const count = ref(0)
    const increment = () => count.value++
    return { count, increment }
  }
}
\`\`\`

A Composition API permite agrupar l√≥gica por funcionalidade, n√£o por op√ß√£o (\`data\`, \`methods\`, etc.), o que facilita reuso e manuten√ß√£o em componentes grandes.

---

## 3. Fragmentos e m√∫ltiplos elementos raiz

No Vue 2, todo componente precisava ter **um √∫nico elemento raiz**. No Vue 3, √© poss√≠vel retornar m√∫ltiplos elementos diretamente:

\`\`\`vue
<template>
  <h1>T√≠tulo</h1>
  <p>Subt√≠tulo</p>
</template>
\`\`\`

---

## 4. Suspense e componentes ass√≠ncronos

O Vue 3 introduziu o \`<Suspense>\`, que facilita carregamento ass√≠ncrono com fallback:

\`\`\`vue
<Suspense>
  <template #default>
    <AsyncComponent />
  </template>
  <template #fallback>
    <div>Carregando...</div>
  </template>
</Suspense>
\`\`\`

---

## 5. Nova forma de criar apps

Vue 3 usa \`createApp\` ao inv√©s de \`new Vue()\`:

\`\`\`js
// Vue 2
new Vue({ render: h => h(App) }).$mount('#app')

// Vue 3
import { createApp } from 'vue'
createApp(App).mount('#app')
\`\`\`

---

## 6. Reatividade com \`ref\` e \`reactive\`

Vue 3 introduziu \`ref()\` e \`reactive()\` como alternativas poderosas ao \`data()\`:

\`\`\`js
const count = ref(0)
const user = reactive({ name: 'Lucas', age: 28 })
\`\`\`

---

## 7. Melhor suporte a TypeScript

Vue 2 tinha suporte parcial e dif√≠cil de escalar com TypeScript. O Vue 3 foi escrito **inteiramente em TypeScript**, com suporte de tipagem mais robusto, especialmente usando \`<script setup lang="ts">\`.

---

## 8. Novo sistema de plugins

Plugins agora s√£o registrados com \`app.use()\` ao inv√©s de \`Vue.use()\`:

\`\`\`js
import { createApp } from 'vue'
import MyPlugin from './plugin'

const app = createApp(App)
app.use(MyPlugin)
\`\`\`

---

## 9. Nova abordagem para eventos personalizados

O Vue 3 removeu o uso autom√°tico do \`.native\` e \`this.$on\`, favorecendo \`emits\` expl√≠citos:

\`\`\`ts
defineEmits(['submit'])
\`\`\`

---

## Conclus√£o

O Vue 3 representa uma evolu√ß√£o significativa da framework, com melhorias em performance, organiza√ß√£o de c√≥digo e suporte moderno para ferramentas como TypeScript. A migra√ß√£o √© altamente recomendada para novos projetos e pode ser feita gradualmente em projetos existentes.

Se voc√™ est√° come√ßando com Vue agora, comece diretamente com o Vue 3 e explore a Composition API para uma arquitetura mais escal√°vel.`,
  },
  {
    id: 6,
    slug: 'composition-api-exemplos',
    title: 'Composition API com exemplos pr√°ticos',
    image: '/images/composition-api-exemplos.png',
    thumb: '/images/composition-api-exemplos-thumb.png',
    content: `# Composition API com exemplos pr√°ticos

A Composition API √© um dos principais recursos do Vue 3. Ela permite uma forma mais flex√≠vel e organizada de escrever componentes Vue, separando a l√≥gica por funcionalidade em vez de por op√ß√µes (\`data\`, \`methods\`, \`computed\`, etc).

Neste post, vamos explorar exemplos pr√°ticos da Composition API para que voc√™ entenda como aplic√°-la no dia a dia.

---

## Por que usar a Composition API?

- Melhor organiza√ß√£o do c√≥digo
- Maior reuso de l√≥gica entre componentes
- Melhor suporte a TypeScript
- Mais controle sobre o ciclo de vida e reatividade

---

## Criando um contador simples

### Usando a Options API (Vue 2)

\`\`\`js
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  }
}
\`\`\`

### Usando a Composition API (Vue 3)

\`\`\`js
import { ref } from 'vue'

export default {
  setup() {
    const count = ref(0)
    const increment = () => count.value++

    return { count, increment }
  }
}
\`\`\`

---

## Separando l√≥gica reutiliz√°vel

Voc√™ pode extrair partes da l√≥gica para fun√ß√µes reutiliz√°veis chamadas \`composables\`.

### useCounter.js

\`\`\`js
import { ref } from 'vue'

export function useCounter() {
  const count = ref(0)
  const increment = () => count.value++
  const reset = () => count.value = 0

  return { count, increment, reset }
}
\`\`\`

### Em um componente

\`\`\`js
import { useCounter } from './useCounter'

export default {
  setup() {
    const { count, increment, reset } = useCounter()
    return { count, increment, reset }
  }
}
\`\`\`

---

## Reatividade com \`reactive\` e \`ref\`

- \`ref(value)\` ‚Üí usado para valores primitivos (string, number, boolean)
- \`reactive(object)\` ‚Üí usado para objetos e arrays

\`\`\`js
const user = reactive({
  name: 'Jo√£o',
  age: 30
})
\`\`\`

---

## Ciclo de vida com Composition API

Use os novos hooks de ciclo de vida dentro do \`setup()\`:

\`\`\`js
import { onMounted, onUnmounted } from 'vue'

setup() {
  onMounted(() => {
    console.log('Componente montado')
  })

  onUnmounted(() => {
    console.log('Componente destru√≠do')
  })
}
\`\`\`

---

## Tipagem com TypeScript

A Composition API tem suporte completo a TypeScript, especialmente com \`<script setup lang="ts">\`.

\`\`\`ts
<script setup lang="ts">
import { ref } from 'vue'

const name = ref<string>('Lucas')
</script>
\`\`\`

---

## Conclus√£o

A Composition API √© poderosa, moderna e essencial para projetos Vue 3 escal√°veis. Ela melhora a legibilidade, a organiza√ß√£o e permite reusar l√≥gica de forma clara. Recomenda-se utiliz√°-la desde o in√≠cio em novos projetos.

Comece pequeno, usando \`ref()\`, \`reactive()\` e \`setup()\`, e logo voc√™ estar√° confort√°vel para criar seus pr√≥prios composables e hooks personalizados.`,
  },
  {
    id: 7,
    slug: 'vuejs-com-typescript',
    title: 'Utilizando Vue.js com TypeScript',
    image: '/images/vuejs-com-typescript.png',
    thumb: '/images/vuejs-com-typescript-thumb.png',
    content: `# Utilizando Vue.js com TypeScript

Com a chegada do Vue 3, o suporte a TypeScript se tornou nativo e robusto. Usar TypeScript em aplica√ß√µes Vue traz diversos benef√≠cios, como seguran√ßa de tipos, autocompletar em IDEs e melhor refatora√ß√£o de c√≥digo.

Neste post, vamos explorar como configurar seu projeto Vue com TypeScript e aplicar boas pr√°ticas na tipagem de props, emits e estados reativos.

---

## Por que usar TypeScript no Vue?

- Detec√ß√£o de erros em tempo de desenvolvimento
- Melhor autocompletar e documenta√ß√£o inline
- Facilita refatora√ß√µes grandes com seguran√ßa
- Mais clareza na comunica√ß√£o entre componentes

---

## Criando um projeto Vue com TypeScript

Se voc√™ est√° usando Vite, crie o projeto com suporte TS:

\`\`\`bash
npm create vite@latest my-app --template vue-ts
\`\`\`

Isso j√° gera a estrutura com \`<script setup lang="ts">\`, arquivos \`.ts\` e tipagens adequadas.

---

## Tipando vari√°veis reativas

Use os gen√©ricos de \`ref()\` e \`reactive()\`:

\`\`\`ts
<script setup lang="ts">
import { ref, reactive } from 'vue'

const count = ref<number>(0)

interface User {
  name: string
  age: number
}

const user = reactive<User>({
  name: 'Lucas',
  age: 28
})
</script>
\`\`\`

---

## Tipando props com \`defineProps\`

\`\`\`ts
<script setup lang="ts">
interface Props {
  title: string
  isActive?: boolean
}

const props = defineProps<Props>()
</script>
\`\`\`

---

## Tipando eventos com \`defineEmits\`

\`\`\`ts
<script setup lang="ts">
const emit = defineEmits<{
  (e: 'submit', payload: { id: number }): void
  (e: 'cancel'): void
}>()
</script>
\`\`\`

---

## Tipagem em componentes filhos

Voc√™ pode passar e validar tipos entre componentes facilmente:

### Pai.vue

\`\`\`vue
<BaseButton @submit="handleSubmit" />
\`\`\`

### BaseButton.vue

\`\`\`ts
<script setup lang="ts">
const emit = defineEmits<{
  (e: 'submit'): void
}>()

const onClick = () => emit('submit')
</script>
\`\`\`

---

## Trabalhando com \`defineExpose\`

√ötil para expor m√©todos para componentes pais:

\`\`\`ts
<script setup lang="ts">
const reset = () => { /* ... */ }
defineExpose({ reset })
</script>
\`\`\`

---

## Dicas e boas pr√°ticas

- Sempre use \`lang="ts"\` no \`<script setup>\`
- Prefira \`interface\` para definir props e dados complexos
- Tipar \`emits\` ajuda a evitar erros de digita√ß√£o
- Use VSCode + Volar para aproveitar o suporte completo de TS no Vue

---

## Conclus√£o

Usar TypeScript com Vue 3 √© uma escolha inteligente para quem busca seguran√ßa e escalabilidade. A integra√ß√£o com a Composition API e o \`<script setup>\` torna o uso de tipos muito mais simples e intuitivo. Com o tempo, voc√™ perceber√° que sua produtividade aumenta √† medida que os erros diminuem.`,
  },
  {
    id: 8,
    slug: 'melhores-praticas-vue',
    title: 'Melhores pr√°ticas para projetos em Vue.js',
    image: '/images/melhores-praticas-vue.png',
    thumb: '/images/melhores-praticas-vue-thumb.png',
    content: `# Melhores pr√°ticas para projetos em Vue.js

Manter a qualidade, legibilidade e escalabilidade de um projeto Vue depende da aplica√ß√£o de boas pr√°ticas desde o in√≠cio. Seja em projetos pequenos ou grandes, seguir padr√µes consistentes ajuda a evitar d√≠vidas t√©cnicas e melhora a colabora√ß√£o entre times.

Neste post, voc√™ encontrar√° um guia com pr√°ticas recomendadas para trabalhar com Vue.js ‚Äî especialmente com Vue 3, Composition API e Vite.

---

## 1. Utilize \`<script setup>\`

O uso do \`<script setup>\` reduz a verbosidade, melhora a legibilidade e facilita o uso de Composition API:

\`\`\`ts
<script setup lang="ts">
import { ref } from 'vue'

const count = ref(0)
</script>
\`\`\`

---

## 2. Organize o projeto em pastas

Estruture seus arquivos em dom√≠nios ou funcionalidades:

\`\`\`
src/
‚îú‚îÄ components/
‚îú‚îÄ views/
‚îú‚îÄ composables/
‚îú‚îÄ router/
‚îú‚îÄ store/
‚îú‚îÄ assets/
‚îú‚îÄ types/
\`\`\`

Evite deixar todos os arquivos na raiz.

---

## 3. Use \`composables\` para l√≥gica reutiliz√°vel

Separe l√≥gica de neg√≥cio reutiliz√°vel em fun√ß√µes puras no diret√≥rio \`/composables\`:

\`\`\`ts
// useDarkMode.ts
import { ref, watch } from 'vue'

export function useDarkMode() {
  const isDark = ref(false)
  watch(isDark, value => {
    document.body.classList.toggle('dark', value)
  })
  return { isDark }
}
\`\`\`

---

## 4. Tipagem sempre que poss√≠vel

Use \`lang="ts"\`, \`defineProps<>()\`, \`defineEmits<>()\` e declare interfaces:

\`\`\`ts
interface Props {
  label: string
  count?: number
}
\`\`\`

---

## 5. Padronize a nomenclatura de componentes

- Use PascalCase para componentes (ex: \`BaseButton.vue\`)
- Evite nomes gen√©ricos como \`Component.vue\` ou \`Page.vue\`
- Prefixe componentes reutiliz√°veis com \`Base\` ou \`App\` (\`BaseCard\`, \`AppHeader\`)

---

## 6. Use \`v-model\` corretamente

Com Vue 3, √© poss√≠vel usar m√∫ltiplos \`v-model\`s e tipar seus updates:

\`\`\`ts
defineProps(['modelValue'])
defineEmits(['update:modelValue'])
\`\`\`

---

## 7. Evite l√≥gica complexa no template

Evite condicional tern√°ria ou chamadas de fun√ß√£o diretamente no HTML. Prefira usar vari√°veis computadas ou m√©todos:

‚ùå Ruim:
\`\`\`vue
<p>{{ items.filter(i => i.active).length > 0 ? 'Ativo' : 'Inativo' }}</p>
\`\`\`

‚úÖ Melhor:
\`\`\`ts
const hasActiveItems = computed(() => items.filter(i => i.active).length > 0)
\`\`\`

---

## 8. Use diretivas utilit√°rias

- \`v-bind\` sempre com shorthand (\`:prop\`)
- \`v-if\` e \`v-for\` n√£o devem coexistir no mesmo elemento
- Use \`key\` sempre que usar \`v-for\`

---

## 9. Utilize plugins e ferramentas √∫teis

- ESLint + Prettier com regras para Vue
- Volar para TS + template intelligence
- Pinia para store
- VueUse para utilit√°rios reativos
- Tailwind CSS (se quiser produtividade em UI)

---

## 10. Documente seus componentes

Documente os \`props\`, eventos, slots e exposi√ß√µes usando coment√°rios JSDoc ou anota√ß√µes diretamente no c√≥digo.

---

## Conclus√£o

Projetos Vue.js bem estruturados s√£o mais f√°ceis de manter, escalar e compartilhar. Adotar boas pr√°ticas n√£o √© um luxo, mas uma necessidade para equipes que buscam efici√™ncia e sustentabilidade a longo prazo.

Comece aplicando essas pr√°ticas gradualmente e use ferramentas que reforcem esses padr√µes no seu time (linters, scaffolds, CI/CD, etc).`,
  },
  {
    id: 9,
    slug: 'animacoes-com-vue',
    title: 'Trabalhando com anima√ß√µes no Vue.js',
    image: '/images/animacoes-com-vue.png',
    thumb: '/images/animacoes-com-vue-thumb.png',
    content: `# Trabalhando com anima√ß√µes no Vue.js

Anima√ß√µes s√£o uma excelente maneira de melhorar a experi√™ncia do usu√°rio, dando vida √† interface e comunicando mudan√ßas de forma mais fluida. O Vue.js oferece suporte nativo a transi√ß√µes e anima√ß√µes com uma API simples e poderosa.

Neste post, vamos ver como aplicar transi√ß√µes em elementos, usar classes personalizadas e integrar bibliotecas externas como GSAP.

---

## Transi√ß√µes com \`<transition>\`

A forma mais comum de aplicar anima√ß√µes no Vue √© usando o componente \`<transition>\`.

\`\`\`vue
<template>
  <button @click="show = !show">Toggle</button>

  <transition name="fade">
    <p v-if="show">Este √© um par√°grafo animado.</p>
  </transition>
</template>

<script setup>
import { ref } from 'vue'

const show = ref(true)
</script>

<style>
.fade-enter-active, .fade-leave-active {
  transition: opacity 0.5s ease;
}
.fade-enter-from, .fade-leave-to {
  opacity: 0;
}
</style>
\`\`\`

---

## Nomes de classe padr√£o

Vue aplica classes espec√≠ficas durante o ciclo de vida da transi√ß√£o:

- \`*-enter-from\`
- \`*-enter-active\`
- \`*-enter-to\`
- \`*-leave-from\`
- \`*-leave-active\`
- \`*-leave-to\`

---

## Transi√ß√µes com componentes

Voc√™ pode aplicar transi√ß√µes ao trocar componentes com \`<component :is="...">\`.

\`\`\`vue
<transition name="fade" mode="out-in">
  <component :is="view" />
</transition>
\`\`\`

---

## Anima√ß√µes com JavaScript (hooks)

Vue permite usar fun√ß√µes para controlar anima√ß√µes mais complexas:

\`\`\`vue
<transition
  @before-enter="beforeEnter"
  @enter="enter"
  @leave="leave"
>
  <div v-if="show">Animado via JS</div>
</transition>
\`\`\`

\`\`\`ts
function beforeEnter(el) {
  el.style.opacity = 0
}
function enter(el, done) {
  gsap.to(el, { opacity: 1, duration: 0.5, onComplete: done })
}
function leave(el, done) {
  gsap.to(el, { opacity: 0, duration: 0.3, onComplete: done })
}
\`\`\`

---

## Integrando GSAP

Para anima√ß√µes complexas, GSAP √© uma √≥tima op√ß√£o:

\`\`\`bash
npm install gsap
\`\`\`

\`\`\`vue
<script setup>
import gsap from 'gsap'
import { onMounted } from 'vue'

onMounted(() => {
  gsap.from('.box', { y: -100, opacity: 0, duration: 1 })
})
</script>

<template>
  <div class="box bg-blue-500 text-white p-4 rounded">
    Animado com GSAP
  </div>
</template>
\`\`\`

---

## Dicas pr√°ticas

- Use \`mode="out-in"\` ao trocar componentes
- Prefira \`transition-group\` para listas com anima√ß√£o
- Sempre defina \`key\` em elementos com \`v-for\`
- Combine Tailwind com classes animadas (ex: \`transition-all\`, \`duration-500\`)
- Evite anima√ß√µes que prejudiquem a acessibilidade (respeite \`prefers-reduced-motion\`)

---

## Conclus√£o

O Vue.js fornece uma base s√≥lida para anima√ß√µes simples e elegantes. Combinando o poder do componente \`<transition>\`, ganchos de ciclo de vida e bibliotecas externas como GSAP, voc√™ pode criar experi√™ncias interativas sem sacrificar a performance ou a manuten√ß√£o do c√≥digo.

Use anima√ß√µes com prop√≥sito, sempre pensando na clareza da interface e na experi√™ncia do usu√°rio.`,
  },
  {
    id: 10,
    slug: 'consumindo-api-com-axios-vue',
    title: 'Consumindo APIs REST com Axios no Vue',
    image: '/images/consumindo-api-com-axios-vue.png',
    thumb: '/images/consumindo-api-com-axios-vue-thumb.png',
    content: `# Consumindo APIs REST com Axios no Vue

Grande parte das aplica√ß√µes web modernas precisa se comunicar com APIs externas para obter e enviar dados. No ecossistema Vue, uma das formas mais populares de fazer isso √© utilizando o Axios, uma biblioteca HTTP baseada em Promises.

Neste post, vamos aprender como configurar o Axios em um projeto Vue 3 com Composition API, como organizar chamadas em servi√ßos e como tratar erros de forma elegante.

---

## Instalando o Axios

\`\`\`bash
npm install axios
\`\`\`

---

## Criando uma inst√¢ncia do Axios

Voc√™ pode configurar uma inst√¢ncia personalizada com baseURL, headers e interceptors:

### \`src/services/api.ts\`

\`\`\`ts
import axios from 'axios'

const api = axios.create({
  baseURL: 'https://jsonplaceholder.typicode.com'
})

export default api
\`\`\`

---

## Fazendo uma requisi√ß√£o no componente

### Exemplo b√°sico:

\`\`\`ts
<script setup lang="ts">
import { ref, onMounted } from 'vue'
import api from '@/services/api'

const posts = ref([])

onMounted(async () => {
  try {
    const response = await api.get('/posts')
    posts.value = response.data
  } catch (error) {
    console.error('Erro ao carregar posts:', error)
  }
})
</script>

<template>
  <ul>
    <li v-for="post in posts" :key="post.id">{{ post.title }}</li>
  </ul>
</template>
\`\`\`

---

## Separando l√≥gica em servi√ßos

Organize suas chamadas em arquivos separados para manter os componentes limpos:

### \`src/services/postService.ts\`

\`\`\`ts
import api from './api'

export async function fetchPosts() {
  const response = await api.get('/posts')
  return response.data
}

export async function fetchPost(id: number) {
  const response = await api.get(\`/posts/\${id}\`)
  return response.data
}
\`\`\`

### Componente usando o servi√ßo:

\`\`\`ts
<script setup lang="ts">
import { ref, onMounted } from 'vue'
import { fetchPosts } from '@/services/postService'

const posts = ref([])

onMounted(async () => {
  posts.value = await fetchPosts()
})
</script>
\`\`\`

---

## Lidando com erros

Uma abordagem pr√°tica √© centralizar o tratamento com interceptors:

\`\`\`ts
api.interceptors.response.use(
  response => response,
  error => {
    if (error.response?.status === 401) {
      // redirecionar para login, por exemplo
    }
    return Promise.reject(error)
  }
)
\`\`\`

Ou aplicar try/catch com mensagens amig√°veis ao usu√°rio:

\`\`\`ts
try {
  const data = await fetchPosts()
} catch (err) {
  toast.error('Erro ao carregar dados. Tente novamente.')
}
\`\`\`

---

## Dicas √∫teis

- Sempre tipar as respostas com interfaces TypeScript
- Prefira \`async/await\` no lugar de \`.then()\`
- Configure \`baseURL\` no arquivo de ambiente para facilitar deploys
- Utilize composables como \`useFetchPosts()\` para l√≥gica reativa

---

## Conclus√£o

Consumir APIs REST com Axios no Vue 3 √© direto, mas exige uma boa organiza√ß√£o para manter o c√≥digo limpo e confi√°vel. Separar servi√ßos, centralizar erros e usar a Composition API trazem clareza e reaproveitamento para suas integra√ß√µes.

Use essas pr√°ticas como base para construir interfaces mais escal√°veis e robustas.`,
  },
  {
    id: 11,
    slug: 'vue-cli-ou-vite',
    title: 'Vue CLI ou Vite? Qual usar em 2025',
    image: '/images/vue-cli-ou-vite.png',
    thumb: '/images/vue-cli-ou-vite-thumb.png',
    content: `# Vue CLI ou Vite? Qual usar em 2025

Ao iniciar um novo projeto Vue, uma das decis√µes mais importantes √© escolher a ferramenta de build e scaffolding ideal. Durante muitos anos, o Vue CLI foi o padr√£o, mas com a chegada do Vite, o cen√°rio mudou completamente.

Neste post, vamos comparar o Vue CLI e o Vite e entender por que a comunidade est√° migrando para o Vite como padr√£o em 2025.

---

## O que √© Vue CLI?

O Vue CLI √© a ferramenta oficial de scaffolding criada para Vue 2 e mantida para Vue 3. Ele utiliza Webpack como bundler, oferece uma interface gr√°fica opcional (UI), e suporta configura√ß√£o via arquivos dedicados ou com zero config.

### Recursos do Vue CLI:

- Baseado em Webpack
- Suporte a plugins via GUI
- Configura√ß√£o extens√≠vel com \`vue.config.js\`
- Projetos com presets e scaffolds completos

---

## O que √© Vite?

O Vite √© uma ferramenta de build moderna criada por Evan You (o mesmo criador do Vue). Ele utiliza ES modules nativos para desenvolvimento ultrarr√°pido e Rollup para builds de produ√ß√£o.

### Recursos do Vite:

- Server de desenvolvimento instant√¢neo
- Build mais r√°pido com Rollup
- Suporte nativo a Vue 3, React, Svelte e outros
- Extens√≠vel com plugins via \`vite.config.ts\`
- Integra√ß√£o mais simples com Tailwind, TypeScript e Composition API

---

## Principais diferen√ßas

| Recurso              | Vue CLI                   | Vite                            |
|----------------------|---------------------------|---------------------------------|
| Bundler              | Webpack                   | Rollup (dev: ESModules)         |
| Velocidade dev       | Mais lento (Webpack)      | Instant√¢neo (ESM nativo)        |
| Configura√ß√£o         | Mais complexa             | Minimalista                     |
| Vue 3 + \`<script setup>\` | Compat√≠vel, mas menos fluido  | Suporte nativo                  |
| HMR (Hot Reload)     | Lento                     | Extremamente r√°pido             |
| Plugins              | Ecossistema antigo        | Comunidade crescente            |

---

## Quando usar Vue CLI

- Projetos legados com Webpack
- Equipes que dependem da GUI do Vue CLI
- Requisitos espec√≠ficos com loaders complexos

---

## Quando usar Vite

- Projetos Vue 3 modernos
- Performance de build e HMR √© prioridade
- Uso com Tailwind CSS, TypeScript, Pinia e \`<script setup>\`
- Deseja simplicidade e velocidade no setup

---

## Criando um projeto com Vite

\`\`\`bash
npm create vite@latest my-app --template vue-ts
cd my-app
npm install
npm run dev
\`\`\`

---

## Criando um projeto com Vue CLI

\`\`\`bash
npm install -g @vue/cli
vue create my-app
\`\`\`

---

## Conclus√£o

O Vue CLI ainda √© funcional, mas o Vite j√° √© considerado o padr√£o de facto para novos projetos Vue em 2025. Ele oferece uma experi√™ncia de desenvolvimento moderna, r√°pida e compat√≠vel com o futuro da web.

Se voc√™ est√° come√ßando agora, v√° de Vite. Se voc√™ mant√©m um projeto legado com Vue 2 ou Webpack, o Vue CLI ainda √© uma op√ß√£o v√°lida ‚Äî mas considere migrar gradualmente.`,
  },
  {
    id: 12,
    slug: 'testes-unitarios-no-vue',
    title: 'Testes unit√°rios em componentes Vue',
    image: '/images/testes-unitarios-no-vue.png',
    thumb: '/images/testes-unitarios-no-vue-thumb.png',
    content: `# Testes unit√°rios em componentes Vue

Testes unit√°rios s√£o fundamentais para garantir que os componentes da sua aplica√ß√£o funcionem corretamente em diferentes cen√°rios. No Vue 3, a combina√ß√£o de [Vue Test Utils](https://test-utils.vuejs.org/) e [Jest](https://jestjs.io/) √© uma das mais utilizadas para realizar esses testes.

Neste post, voc√™ aprender√° como configurar o ambiente de testes e escrever testes unit√°rios eficazes para componentes Vue.

---

## Por que testar?

- Garante que altera√ß√µes no c√≥digo n√£o quebrem funcionalidades existentes
- Facilita refatora√ß√µes
- Serve como documenta√ß√£o de comportamento
- Ajuda a identificar bugs antes da produ√ß√£o

---

## Instalando as depend√™ncias

\`\`\`bash
npm install -D jest @vue/test-utils vue-jest ts-jest @testing-library/jest-dom
\`\`\`

Configure o Jest:

### \`jest.config.js\`

\`\`\`js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  transform: {
    '^.+\\.vue$': 'vue-jest',
    '^.+\\.ts$': 'ts-jest'
  },
  moduleFileExtensions: ['js', 'ts', 'vue']
}
\`\`\`

---

## Criando um componente para teste

### \`BaseButton.vue\`

\`\`\`vue
<template>
  <button @click="$emit('click')">
    <slot>Bot√£o</slot>
  </button>
</template>

<script setup lang="ts">
defineEmits(['click'])
</script>
\`\`\`

---

## Escrevendo o teste

### \`BaseButton.test.ts\`

\`\`\`ts
import { mount } from '@vue/test-utils'
import BaseButton from '@/components/BaseButton.vue'

describe('BaseButton', () => {
  it('renderiza corretamente', () => {
    const wrapper = mount(BaseButton, {
      slots: { default: 'Clique aqui' }
    })
    expect(wrapper.text()).toBe('Clique aqui')
  })

  it('emite evento de clique', async () => {
    const wrapper = mount(BaseButton)
    await wrapper.trigger('click')
    expect(wrapper.emitted()).toHaveProperty('click')
  })
})
\`\`\`

---

## Testando props

Se seu componente tiver props, voc√™ pode test√°-las facilmente:

### \`MyTitle.vue\`

\`\`\`vue
<template>
  <h1 :class="{ 'is-large': large }">{{ title }}</h1>
</template>

<script setup lang="ts">
defineProps<{ title: string; large?: boolean }>()
</script>
\`\`\`

### \`MyTitle.test.ts\`

\`\`\`ts
import { mount } from '@vue/test-utils'
import MyTitle from '@/components/MyTitle.vue'

it('aplica classe condicional se "large" for true', () => {
  const wrapper = mount(MyTitle, {
    props: { title: 'Ol√°', large: true }
  })
  expect(wrapper.classes()).toContain('is-large')
})
\`\`\`

---

## Boas pr√°ticas

- Escreva testes claros e de f√°cil leitura
- Nomeie os testes pelo comportamento esperado
- Evite testar implementa√ß√£o interna (foco no resultado)
- Use \`data-testid\` para facilitar a sele√ß√£o de elementos
- Combine com testes de integra√ß√£o para cobrir fluxos completos

---

## Conclus√£o

Testes unit√°rios em Vue n√£o precisam ser complicados. Com Vue Test Utils e Jest, √© poss√≠vel validar componentes com rapidez e confian√ßa. Comece testando os componentes mais reutilizados, como bot√µes e formul√°rios, e expanda para os mais complexos conforme necess√°rio.

Testes s√£o investimentos: quanto antes voc√™ come√ßar, mais f√°cil ser√° manter a sa√∫de do seu projeto Vue.`,
  },
  {
    id: 13,
    slug: 'deploy-vue-netlify',
    title: 'Como fazer deploy do seu app Vue na Netlify',
    image: '/images/deploy-vue-netlify.png',
    thumb: '/images/deploy-vue-netlify-thumb.png',
    content: `# Como fazer deploy do seu app Vue na Netlify

Publicar seu projeto Vue na internet √© uma das etapas mais gratificantes do desenvolvimento. A [Netlify](https://www.netlify.com/) √© uma plataforma gratuita (com plano generoso) que permite hospedar aplica√ß√µes front-end com CI/CD integrado ao seu reposit√≥rio Git.

Neste post, voc√™ vai aprender como fazer deploy de um app Vue criado com Vite na Netlify ‚Äî do zero at√© produ√ß√£o.

---

## Pr√©-requisitos

- Projeto Vue criado com Vite
- Conta no GitHub
- Conta gratuita na Netlify

---

## 1. Suba seu projeto para o GitHub

Se ainda n√£o fez isso, inicialize o reposit√≥rio:

\`\`\`bash
git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/seu-usuario/seu-projeto.git
git push -u origin main
\`\`\`

---

## 2. Crie uma conta no Netlify

- Acesse [netlify.com](https://www.netlify.com/)
- Clique em \‚ÄúSign up\‚Äù e conecte com sua conta GitHub
- Autorize o acesso aos reposit√≥rios

---

## 3. Fa√ßa o deploy

- Clique em **"Add new site" > "Import an existing project"**
- Selecione o reposit√≥rio do GitHub
- Configure os seguintes campos:

| Campo             | Valor           |
|------------------|-----------------|
| Build command     | \`npm run build\` |
| Publish directory | \`dist\`         |
| Framework preset  | \`Vite\`         |

- Clique em **Deploy Site**

A Netlify ir√°:
1. Clonar seu projeto
2. Instalar as depend√™ncias
3. Rodar \`npm run build\`
4. Publicar o conte√∫do da pasta \`dist\`

---

## 4. Adicione um arquivo \`netlify.toml\` (opcional)

Para configura√ß√µes mais avan√ßadas, como redirects ou headers personalizados, crie um arquivo na raiz do projeto:

\`\`\`toml
[build]
  publish = "dist"
  command = "npm run build"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
\`\`\`

Esse redirect √© necess√°rio em SPAs para garantir que todas as rotas redirecionem para o \`index.html\`.

---

## 5. Configurando deploy cont√≠nuo

Toda vez que voc√™ fizer push no GitHub, a Netlify ir√° automaticamente:

- Buscar o novo commit
- Rodar o build
- Atualizar o site com as novas mudan√ßas

Voc√™ pode acompanhar logs e status de deploy direto pelo painel da Netlify.

---

## 6. Usando dom√≠nio personalizado

- V√° at√© "Site Settings" > "Domain management"
- Clique em "Add custom domain"
- Aponte seu dom√≠nio via DNS para o endere√ßo \`your-site.netlify.app\`

---

## Conclus√£o

A Netlify simplifica o deploy de aplica√ß√µes Vue com integra√ß√£o cont√≠nua e suporte nativo ao Vite. Com poucos cliques, seu app pode estar publicado e atualizado automaticamente a cada commit.

Agora que voc√™ publicou seu projeto, compartilhe com o mundo! üöÄ`,
  },
  {
    id: 14,
    slug: 'vue-e-tailwind-css',
    title: 'Utilizando Tailwind CSS com Vue.js',
    image: '/images/vue-e-tailwind-css.png',
    thumb: '/images/vue-e-tailwind-css-thumb.png',
    content: `# Vue.js + Tailwind CSS: Interface bonita e responsiva

Criar interfaces bonitas e responsivas com Vue.js pode ser simples e r√°pido ‚Äî especialmente quando se usa o [Tailwind CSS](https://tailwindcss.com/). Essa biblioteca de utilit√°rios CSS permite construir layouts com agilidade, sem sair do HTML, e com total controle sobre responsividade, tema e anima√ß√µes.

Neste post, voc√™ aprender√° a configurar o Tailwind em um projeto Vue 3 e ver√° exemplos pr√°ticos para criar UIs modernas, bonitas e escal√°veis.

---

## 1. Instalando o Tailwind CSS

Se voc√™ usa Vite (recomendado com Vue 3), rode:

\`\`\`bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
\`\`\`

---

## 2. Configurando o Tailwind

No arquivo \`tailwind.config.js\`, defina onde o Tailwind deve buscar classes:

\`\`\`js
module.exports = {
  content: ['./index.html', './src/**/*.{vue,js,ts}'],
  theme: {
    extend: {}
  },
  plugins: []
}
\`\`\`

No arquivo CSS principal (ex: \`src/style.css\`):

\`\`\`css
@tailwind base;
@tailwind components;
@tailwind utilities;
\`\`\`

Importe o CSS no seu \`main.ts\`:

\`\`\`ts
import './style.css'
\`\`\`

---

## 3. Criando layout responsivo com Vue + Tailwind

### Exemplo de Card de Produto

\`\`\`vue
<template>
  <div class="max-w-sm bg-white shadow-md rounded overflow-hidden hover:shadow-lg transition">
    <img src="https://source.unsplash.com/random/400x200" class="w-full" />
    <div class="p-4">
      <h2 class="text-xl font-bold text-gray-800">Produto</h2>
      <p class="text-gray-600 text-sm mt-1">Descri√ß√£o curta do produto.</p>
      <button class="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
        Comprar
      </button>
    </div>
  </div>
</template>
\`\`\`

---

## 4. Responsividade com utilit√°rios

Tailwind usa prefixos como \`sm:\`, \`md:\`, \`lg:\`, \`xl:\` para estilos responsivos:

\`\`\`html
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
  <!-- cards aqui -->
</div>
\`\`\`

Isso define:
- 1 coluna no mobile
- 2 colunas em tablets
- 4 colunas em desktops

---

## 5. Dark mode (modo escuro)

Ative o modo escuro no \`tailwind.config.js\`:

\`\`\`js
module.exports = {
  darkMode: 'class',
  // ...
}
\`\`\`

Aplique tema escuro com uma classe:

\`\`\`html
<body class="dark">
  <div class="bg-white dark:bg-gray-900 text-black dark:text-white">
    Conte√∫do adapt√°vel
  </div>
</body>
\`\`\`

---

## 6. Anima√ß√µes com Tailwind

\`\`\`html
<button class="transition duration-300 transform hover:scale-105">
  Hover animado
</button>
\`\`\`

---

## 7. Dicas pr√°ticas

- Use \`@apply\` para agrupar estilos em CSS modules ou componentes
- Combine Tailwind com Heroicons ou Lucide para √≠cones
- Mantenha consist√™ncia de padding, espa√ßamento e cores com tokens do Tailwind
- Explore o plugin \`@tailwindcss/typography\` para melhorar estilos de markdown

---

## Conclus√£o

Integrar Vue.js com Tailwind CSS √© uma das combina√ß√µes mais produtivas para criar interfaces modernas, bonitas e responsivas. Com pouco esfor√ßo, voc√™ consegue montar layouts que funcionam bem em qualquer dispositivo, mantendo seu CSS enxuto e sem repetir c√≥digo.

Comece criando seus pr√≥prios componentes estilizados e experimente escalar para sistemas de design completos com base no Tailwind.`,
  },
  {
    id: 15,
    slug: 'autenticacao-no-vue-js-com-token-jwt',
    title: 'Autentica√ß√£o no Vue.js com Token JWT',
    image: '/images/autenticacao-no-vue-js-com-token-jwt.png',
    thumb: '/images/autenticacao-no-vue-js-com-token-jwt-thumb.png',
    content: `# Autentica√ß√£o no Vue.js com Token JWT

Autentica√ß√£o √© uma parte essencial de qualquer aplica√ß√£o que exige login. Uma das abordagens mais comuns √© o uso de **JWT (JSON Web Token)**, que permite autentica√ß√£o baseada em token de forma segura e sem necessidade de sess√£o no servidor.

Neste post, voc√™ vai aprender como implementar autentica√ß√£o com JWT em um projeto Vue.js, utilizando Vue 3, Composition API, e Axios.

---

## O que √© JWT?

JWT (JSON Web Token) √© um formato compacto e seguro para representar informa√ß√µes entre duas partes. Ele √© amplamente usado para autentica√ß√£o porque pode ser armazenado no lado do cliente e validado no servidor sem armazenar estado.

---

## 1. Fluxo b√°sico de autentica√ß√£o com JWT

1. Usu√°rio envia login e senha para a API
2. A API retorna um token JWT v√°lido
3. O cliente armazena esse token (em \`localStorage\` ou \`sessionStorage\`)
4. Em cada requisi√ß√£o subsequente, o token √© enviado no header Authorization
5. O backend valida o token e permite ou nega o acesso

---

## 2. Tela de login no Vue

### \`LoginView.vue\`

\`\`\`vue
<template>
  <form @submit.prevent="handleLogin">
    <input v-model="email" placeholder="Email" class="input" />
    <input v-model="password" type="password" placeholder="Senha" class="input" />
    <button class="btn">Entrar</button>
  </form>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import api from '@/services/api'

const email = ref('')
const password = ref('')

async function handleLogin() {
  try {
    const response = await api.post('/auth/login', { email: email.value, password: password.value })
    const token = response.data.token
    localStorage.setItem('token', token)
    // redirecionar
  } catch (error) {
    console.error('Erro ao autenticar:', error)
  }
}
</script>
\`\`\`

---

## 3. Interceptor de requisi√ß√µes com token

### \`src/services/api.ts\`

\`\`\`ts
import axios from 'axios'

const api = axios.create({
  baseURL: 'https://sua-api.com'
})

api.interceptors.request.use(config => {
  const token = localStorage.getItem('token')
  if (token) {
    config.headers.Authorization = \`Bearer \${token}\`
  }
  return config
})

export default api
\`\`\`

---

## 4. Protegendo rotas com Navigation Guards

### \`src/router/index.ts\`

\`\`\`ts
import { createRouter, createWebHistory } from 'vue-router'
import Home from '@/views/HomeView.vue'
import Login from '@/views/LoginView.vue'

const routes = [
  { path: '/', component: Home, meta: { requiresAuth: true } },
  { path: '/login', component: Login }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

router.beforeEach((to, from, next) => {
  const token = localStorage.getItem('token')
  if (to.meta.requiresAuth && !token) {
    next('/login')
  } else {
    next()
  }
})

export default router
\`\`\`

---

## 5. Fazendo logout

\`\`\`ts
function logout() {
  localStorage.removeItem('token')
  router.push('/login')
}
\`\`\`

---

## Boas pr√°ticas

- Nunca armazene tokens em \`cookies\` sem \`HttpOnly\`
- Prefira \`localStorage\` para SPAs sem backend pr√≥prio
- Use HTTPS sempre que for trafegar tokens
- Expire o token no backend e trate status 401 para redirecionar
- Evite guardar informa√ß√µes sens√≠veis no payload do JWT

---

## Conclus√£o

Autentica√ß√£o com JWT no Vue √© simples de implementar, segura e funciona bem para aplica√ß√µes SPA modernas. Com Vue 3 e Composition API, o gerenciamento de token e a prote√ß√£o de rotas se tornam organizados e previs√≠veis.

Agora que voc√™ configurou login e autentica√ß√£o, √© hora de proteger as funcionalidades cr√≠ticas do seu app com base no token!`,
  },
]
